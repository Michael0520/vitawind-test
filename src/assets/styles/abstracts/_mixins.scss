// Function

@function vw($value) {
  // $value: 100 * $value / $rwdS;
  $value: calc(100 * $value / $rwdS);
  @return $value + vw;
  // @return $value + vmin;
}

// @function vmin($value) {
//     $value: 100 * $value / $rwdS;
//     @return $value + vmin;
// }

@function vwM($value) {
  // $value: 100 * $value / ($rwdM + 80);
  $value: calc(100 * $value / $rwdM);
  @return $value + vw;
}

@function vmin($value) {
  $value: 100 * $value / ($rwdM + 0);
  @return $value + vmin;
}

@function vwL($value) {
  // $value: 100 * $value / $rwdL;
  $value: calc(100 * $value / $rwdL);
  @return $value + vw;
}

@function vwX($value) {
  $value: 100 * $value / $rwdX;
  @return $value + vw;
}

@function vwXL($value) {
  $value: 100 * $value / $rwdXL;
  @return $value + vw;
}

// @function vmin2X($value) {
//     $value: 100 * $value / 1080;
//     @return $value + vmin;
// }

@function vhX($value) {
  $value: 100 * $value / (1080 + 0);
  @return $value + vh;
}

@function lineHeight($fontSize, $lineHeight) {
  $value: $lineHeight / $fontSize;
  @return $value;
}

// Mixin

@mixin hover {
  @media (hover: hover) and (min-width: #{$rwdM + 1}px) {
    @content;
  }
}

@mixin lt($value) {
  @media (max-width: #{$value}px) {
    @content;
  }
}

@mixin gt($value) {
  @media (min-width: #{$value + 1}px) {
    @content;
  }
}

@mixin desktopRatio($width, $height) {
  @media (min-width: #{$rwdM + 1}px) and (max-aspect-ratio: #{$width + '/' + $height}) {
    @content;
  }
}

@mixin desktop {
  @media (max-width: $desktop) {
    @content;
  }
}

@mixin tablet {
  @media (max-width: $tablet) {
    @content;
  }
}

@mixin mobile {
  @media (max-width: $mobile) {
    @content;
  }
}

@mixin landscape {
  @media (max-width: $tablet) and (orientation: landscape) {
    @content;
  }
}

// @mixin max-aspect-ratio($width, $height) {

//     @media (max-aspect-ratio: (#{$width} / #{$height})) {
//         @content;
//     }

// }

@mixin hide-text {
  font-size: 0;
  text-indent: -5000px;
}

@mixin scale($axis, $value: 0.9) {
  display: inline-block;
  @if $axis == x {
    @if $value == 1.3 {
      transform: scaleX($value - 0.3);
    } @else if $value == 0.9 {
      transform: scaleX($value + 0.05);
    }
  } @else if $axis == y {
    transform: scaleY(1);
  }
}

@mixin text-gradient {
  background: linear-gradient(
    0deg,
    rgba(239, 166, 1, 1) 0%,
    rgba(239, 166, 1, 1) 47%,
    rgba(255, 222, 0, 1) 48%,
    rgba(255, 222, 0, 1) 100%
  );
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

@mixin stroke($color: #000, $size: 1px) {
  text-shadow: -#{$size} -#{$size} 0 $color, 0 -#{$size} 0 $color,
    #{$size} -#{$size} 0 $color, #{$size} 0 0 $color, #{$size} #{$size} 0 $color,
    0 #{$size} 0 $color, -#{$size} #{$size} 0 $color, -#{$size} 0 0 $color;
}

@mixin text-bolder($color: $color-black, $size: vwXL(1)) {
  -webkit-text-stroke: $color $size;
}

@mixin moveFadeDefault(
  $props: (
    transfrom,
    opacity,
  ),
  $dur: $secondaryDuration,
  $delay: 0s,
  $ease: ease-out,
  $value: 30%
) {
  will-change: $props;
  @if $props == (transfrom, opacity) {
    transform: translateY($value);
  } @else if $props == (margin, opacity) {
    margin-top: $value;
  }
  opacity: 0;
  transition-property: $props;
  transition-duration: $dur;
  transition-delay: $delay;
  transition-timing-function: $ease;
}

@mixin moveFadeIn($props: transform) {
  @if $props == transfrom {
    transform: translateY(0);
  } @else if $props == (margin) {
    margin-top: 0;
  }
  opacity: 1;
}

@mixin scaleDefault {
  transition: all $primaryDuration ease-out;
  transition-property: opacity, transform;
  transform: scale(0) translateZ(0);
  opacity: 0;
  backface-visibility: hidden;
  will-change: transform, opacity;
}

@mixin scaleIn {
  transform: scale(1);
  opacity: 1;
}

@keyframes arrow-animation {
  0% {
    transform: translateX(0);
  }
  50% {
    transform: translateX(50%);
  }
  100% {
    transform: translateX(0);
  }
}
